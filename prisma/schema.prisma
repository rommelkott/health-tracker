// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  lastUpdated DateTime @default(now()) @updatedAt
  description String?

  // health information
  birthday    DateTime?
  height      Int?

  // fitness information
  cardioFitness Float?

  // activity information
  workoutMinutes  WorkoutMinutes[]
  stepCounts      StepCount[]
  runningSessions RunningSession[]
  weights         Weight[]
}

model Weight {
  id       String   @id @default(cuid())
  weight   Float
  date DateTime @default(now())
  profile Profile @relation(fields: [profileId], references: [id])
  profileId String
}

model WorkoutMinutes {
  id        String   @id @default(cuid())
  date DateTime @default(now())
  minutes   Float
  Profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
}

model StepCount {
  id        String   @id @default(cuid())
  date DateTime @default(now())
  steps     Float
  Profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
}

model RunningSession {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  distance  Float
  duration  Float
  Profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  apiKey        String?   @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
